#! /usr/bin/env python

""" Events allow for the orderly consumption of changes and happenings within the game.
"""


def Debug(msg):
    print msg


class Event:
    """this is a superclass for any events that might be generated by an
    object and sent to the EventManager"""

    def __init__(self):
        self.name = "Generic Event"


class TickEvent(Event):
    def __init__(self):
        Event.__init__(self)
        self.name = "CPU Tick Event"


class QuitEvent(Event):
    def __init__(self):
        Event.__init__(self)
        self.name = "Program Quit Event"


class StageBuiltEvent(Event):
    def __init__(self, gameStage):
        Event.__init__(self)
        self.name = "Stage Finished Building Event"
        self.stage = gameStage


class IntroStartedEvent(Event):
    def __init__(self, game):
        Event.__init__(self)
        self.name = "Intro Started Event"
        self.game = game


class GameStartedEvent(Event):
    def __init__(self, game):
        Event.__init__(self)
        self.name = "Game Started Event"
        self.game = game


class GameConfigEvent(Event):
    def __init__(self, game):
        Event.__init__(self)
        self.name = "Game Configuration Event"
        self.game = game


class RenderInputRequest(Event):
    def __init__(self, usr_input):
        Event.__init__(self)
        self.name = "Render Input Request"
        self.usr_input = usr_input


class EventManager:
    """this object is responsible for coordinating most communication
    between the Model, View, and Controller."""

    def __init__(self):
        from weakref import WeakKeyDictionary

        self.listeners = WeakKeyDictionary()
        self.eventQueue = []

    def RegisterListener(self, listener):
        self.listeners[listener] = 1
        print self.listeners

    def UnregisterListener(self, listener):
        if listener in self.listeners:
            del self.listeners[listener]

    def Post(self, event):
        if not isinstance(event, TickEvent):
            Debug("     Message: " + event.name)
        for listener in self.listeners:
            #NOTE: If the weakref has died, it will be
            #automatically removed, so we don't have
            #to worry about it.

            listener.Notify(event)
